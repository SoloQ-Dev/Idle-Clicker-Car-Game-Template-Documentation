{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Quests system documentation Thank you for your purchase! Overview Why is this system needed? It's all very simple. Creating quests is a complicated and routine process, but with my system, this process can be made much easier. Main feature: Independent logic for each quest Installation After purchasing the asset, go to your project (Version unity in asset 2020.3.33f1 ) Open your project Go to Window->Package manager Select in Packages: My assets Find Quests system in the list Download Import Quests manager (IMPORTANT) IMPORTANT! Don't forget to add the QuestsManager.cs script on scene! Open your scene Create new empty game object Add component QuestsManager.cs on this object","title":"Getting Started"},{"location":"#welcome-to-quests-system-documentation","text":"Thank you for your purchase!","title":"Welcome to Quests system documentation"},{"location":"#overview","text":"","title":"Overview"},{"location":"#installation","text":"After purchasing the asset, go to your project (Version unity in asset 2020.3.33f1 ) Open your project Go to Window->Package manager Select in Packages: My assets Find Quests system in the list Download Import","title":"Installation"},{"location":"#quests-manager-important","text":"IMPORTANT! Don't forget to add the QuestsManager.cs script on scene! Open your scene Create new empty game object Add component QuestsManager.cs on this object","title":"Quests manager (IMPORTANT)"},{"location":"about/","text":"Credit Quests System by SoloQ Site Contact Email: Glucknut@gmail.com Other Assets Clicker-Idle Game Template - Asset store 2D Platformer Game Template - Asset store The Battle Multiplayer Game Template - Asset store The Dungeon Game Kit - Asset store Other Projects Remains - Steam Operation sniff - Steam","title":"About"},{"location":"about/#credit","text":"Quests System by SoloQ Site Contact Email: Glucknut@gmail.com","title":"Credit"},{"location":"about/#other-assets","text":"Clicker-Idle Game Template - Asset store 2D Platformer Game Template - Asset store The Battle Multiplayer Game Template - Asset store The Dungeon Game Kit - Asset store","title":"Other Assets"},{"location":"about/#other-projects","text":"Remains - Steam Operation sniff - Steam","title":"Other Projects"},{"location":"components/","text":"Creating custom components for the system This example will show the creation of a trigger to activate the quest Create a new class You can create whatever you want, but in this example it will be QuestTrigger.cs Quest info Add a variable where we will store information about the quest that will call this component [SerializeField] private QuestsNames questName; //Set the required quest from inspector Trigger Since this is a trigger, we add the standard unity method private void OnTriggerEnter(Collider other) { if (other.gameObject.tag == \"Player\") { gameObject.SetActive(false); //self-disabling } } Parameters Parameters for defining the trigger type private enum TriggerType { Accept, Update, Complete } [SerializeField] private TriggerType triggerType; Quest action We check for the type of trigger and select the desired action with the quest private void OnTriggerEnter(Collider other) { if (other.gameObject.tag == \"Player\") { //Perform the desired action depending on the selected type switch (triggerType) { case TriggerType.Accept: QuestsManager.Instance.AddQuest(questName); break; case TriggerType.Update: QuestsManager.Instance.UpdateQuestProgress(questName); break; case TriggerType.Complete: QuestsManager.Instance.RemoveQuest(questName, true); break; } gameObject.SetActive(false); //self-disabling } }","title":"Custom components"},{"location":"components/#creating-custom-components-for-the-system","text":"This example will show the creation of a trigger to activate the quest","title":"Creating custom components for the system"},{"location":"components/#create-a-new-class","text":"You can create whatever you want, but in this example it will be QuestTrigger.cs","title":"Create a new class"},{"location":"components/#quest-info","text":"Add a variable where we will store information about the quest that will call this component [SerializeField] private QuestsNames questName; //Set the required quest from inspector","title":"Quest info"},{"location":"components/#trigger","text":"Since this is a trigger, we add the standard unity method private void OnTriggerEnter(Collider other) { if (other.gameObject.tag == \"Player\") { gameObject.SetActive(false); //self-disabling } }","title":"Trigger"},{"location":"components/#parameters","text":"Parameters for defining the trigger type private enum TriggerType { Accept, Update, Complete } [SerializeField] private TriggerType triggerType;","title":"Parameters"},{"location":"components/#quest-action","text":"We check for the type of trigger and select the desired action with the quest private void OnTriggerEnter(Collider other) { if (other.gameObject.tag == \"Player\") { //Perform the desired action depending on the selected type switch (triggerType) { case TriggerType.Accept: QuestsManager.Instance.AddQuest(questName); break; case TriggerType.Update: QuestsManager.Instance.UpdateQuestProgress(questName); break; case TriggerType.Complete: QuestsManager.Instance.RemoveQuest(questName, true); break; } gameObject.SetActive(false); //self-disabling } }","title":"Quest action"},{"location":"editor/","text":"First steps using the editor Open quests editor window First, open an editor window: Find Utilities in the menu list Select Quests editor Window map How to work with the editor window Creating a new quest In the \"New quest config name\" field, write the name of the new quest Click create quest Quest editing Select the required quest Changing the name or description Click save Important! : Autosave is missing due to changes in the FILES in the project! Quest logic After creating a quest, you need to create the logic to complete it. Note: A quest can be added to the list of active quests and run without a logic file! Creating logic To create logic for your quest: Select the required quest Click Create logic class Wait for project compile Editing logic In the updated window of the selected quest, click Open logic class. Hello_QuestLogic.cs public override QuestsNames QuestName => QuestsNames.{QUEST_NAME}; public override string QuestTastText => \"TASK_TEXT\"; public override void OnAccept() { //Called when a quest is accepted } public override void Logic() { //The logic that works all the time while the quest is active } public override void Progress() { //Called when there is logic for progress (Call from any other entity) } public override void OnComplete() { //Called when a quest is completed } You can implement any logic you want. You don't need to add this script anywhere. The quest manager automatically takes the logic file from the config it needs. The implementation example in the GameSample folder.","title":"Editor"},{"location":"editor/#first-steps-using-the-editor","text":"","title":"First steps using the editor"},{"location":"editor/#open-quests-editor-window","text":"First, open an editor window: Find Utilities in the menu list Select Quests editor","title":"Open quests editor window"},{"location":"editor/#window-map","text":"","title":"Window map"},{"location":"editor/#how-to-work-with-the-editor-window","text":"","title":"How to work with the editor window"},{"location":"editor/#creating-a-new-quest","text":"In the \"New quest config name\" field, write the name of the new quest Click create quest","title":"Creating a new quest"},{"location":"editor/#quest-editing","text":"Select the required quest Changing the name or description Click save Important! : Autosave is missing due to changes in the FILES in the project!","title":"Quest editing"},{"location":"editor/#quest-logic","text":"After creating a quest, you need to create the logic to complete it. Note: A quest can be added to the list of active quests and run without a logic file!","title":"Quest logic"},{"location":"editor/#creating-logic","text":"To create logic for your quest: Select the required quest Click Create logic class Wait for project compile","title":"Creating logic"},{"location":"editor/#editing-logic","text":"In the updated window of the selected quest, click Open logic class. Hello_QuestLogic.cs public override QuestsNames QuestName => QuestsNames.{QUEST_NAME}; public override string QuestTastText => \"TASK_TEXT\"; public override void OnAccept() { //Called when a quest is accepted } public override void Logic() { //The logic that works all the time while the quest is active } public override void Progress() { //Called when there is logic for progress (Call from any other entity) } public override void OnComplete() { //Called when a quest is completed } You can implement any logic you want. You don't need to add this script anywhere. The quest manager automatically takes the logic file from the config it needs. The implementation example in the GameSample folder.","title":"Editing logic"},{"location":"sample/","text":"Little game sample with quests system In the GameSample folder you can find my example of implementing quests in a simple game Quest description End your story - The player needs to complete all quests Go to the village - There is a trigger at the entrance to the village Welcome to the village - Need to talk to everyone in town Get athletic like Eren - Walk the distance Steve`s flower - Collect 10 flowers Find Joe - After completing some quests, Joe will appear and he has a trigger Talk to Joe - Interaction with Joe Files All code of the example game and editor has comments. You can open any and see how it works!","title":"Sample"},{"location":"sample/#little-game-sample-with-quests-system","text":"In the GameSample folder you can find my example of implementing quests in a simple game","title":"Little game sample with quests system"},{"location":"sample/#quest-description","text":"End your story - The player needs to complete all quests Go to the village - There is a trigger at the entrance to the village Welcome to the village - Need to talk to everyone in town Get athletic like Eren - Walk the distance Steve`s flower - Collect 10 flowers Find Joe - After completing some quests, Joe will appear and he has a trigger Talk to Joe - Interaction with Joe","title":"Quest description"},{"location":"sample/#files","text":"All code of the example game and editor has comments. You can open any and see how it works!","title":"Files"},{"location":"using/","text":"Integrating the system into your code IMPORTANT! Don't forget to add the QuestsManager.cs script on scene! Namespace To use the system code, you need to include the namespace using QuestsSystem; Quest activation Quest activation occurs through a call to QuestsManager. QuestsManager.Instance.AddQuest(QuestsNames.YourQuest); After creating/deleting/modifying a quest through the editor, it automatically creates the enum list with all quests in the project: public enum QuestsNames { QuestOne, QuestTwo } Quest progress If you have logic in the quest that needs to be updated after any action. QuestsManager.Instance.UpdateQuestProgress(QuestsNames.YourQuest); Quest complete/remove If the quest has been completed QuestsManager.Instance.RemoveQuest(QuestsNames.YourQuest, true); If you want to remove a quest from the list without calling OnComplete QuestsManager.Instance.RemoveQuest(QuestsNames.YourQuest, false);","title":"Using in code"},{"location":"using/#integrating-the-system-into-your-code","text":"IMPORTANT! Don't forget to add the QuestsManager.cs script on scene!","title":"Integrating the system into your code"},{"location":"using/#namespace","text":"To use the system code, you need to include the namespace using QuestsSystem;","title":"Namespace"},{"location":"using/#quest-activation","text":"Quest activation occurs through a call to QuestsManager. QuestsManager.Instance.AddQuest(QuestsNames.YourQuest); After creating/deleting/modifying a quest through the editor, it automatically creates the enum list with all quests in the project: public enum QuestsNames { QuestOne, QuestTwo }","title":"Quest activation"},{"location":"using/#quest-progress","text":"If you have logic in the quest that needs to be updated after any action. QuestsManager.Instance.UpdateQuestProgress(QuestsNames.YourQuest);","title":"Quest progress"},{"location":"using/#quest-completeremove","text":"If the quest has been completed QuestsManager.Instance.RemoveQuest(QuestsNames.YourQuest, true); If you want to remove a quest from the list without calling OnComplete QuestsManager.Instance.RemoveQuest(QuestsNames.YourQuest, false);","title":"Quest complete/remove"}]}